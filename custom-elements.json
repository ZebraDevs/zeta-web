{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/components/typography.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/banner/banner.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A banner displays an important, succinct message, and provides action for users to address. It draws the attention to the message by displaying it at the top in various colors.",
          "name": "ZetaSystemBanner",
          "members": [
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "\"default\" | \"positive\" | \"warning\" | \"negative\""
              },
              "default": "\"default\"",
              "description": "Type of banner.",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "\"start\" | \"center\""
              },
              "default": "\"start\"",
              "description": "Alignment of banner.",
              "attribute": "align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text displayed on the banner.\r\n\r\nCan also be slotted.",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "status",
              "type": {
                "text": "\"default\" | \"positive\" | \"warning\" | \"negative\""
              },
              "default": "\"default\"",
              "description": "Type of banner.",
              "fieldName": "status"
            },
            {
              "name": "align",
              "type": {
                "text": "\"start\" | \"center\""
              },
              "default": "\"start\"",
              "description": "Alignment of banner.",
              "fieldName": "align"
            },
            {
              "name": "text",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text displayed on the banner.\r\n\r\nCan also be slotted.",
              "fieldName": "text"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=22195-43965",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/banner--docs",
            "description": ""
          },
          "tagName": "zeta-system-banner",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaSystemBanner",
          "declaration": {
            "name": "ZetaSystemBanner",
            "module": "src/components/banner/banner.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-system-banner",
          "declaration": {
            "name": "ZetaSystemBanner",
            "module": "src/components/banner/banner.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badges/badges.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./indicators/indicators.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./priority-pill/priority-pill.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./status-label/status-label.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./tag/tag.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./label/label.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./workcloud-indicator/workcloud-indicator.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/avatar/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An avatar is a visual representation of a user or entity.",
          "name": "ZetaAvatar",
          "members": [
            {
              "kind": "field",
              "name": "imageUrl",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL of the image displayed in the avatar.",
              "attribute": "imageUrl"
            },
            {
              "kind": "field",
              "name": "initials",
              "type": {
                "text": "string | undefined"
              },
              "description": "The initials displayed in the avatar.\r\n\r\nWill not be displayed an imageUrl is given.",
              "attribute": "initials"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
              },
              "default": "\"md\"",
              "description": "The size of the avatar.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showStatus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Puts a green border around the avatar.",
              "attribute": "showStatus",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "notificationText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The text displayed in the notification badge.",
              "attribute": "notificationText"
            },
            {
              "kind": "field",
              "name": "statusIcon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "The icon displayed in the status badge.",
              "attribute": "statusIcon"
            },
            {
              "kind": "field",
              "name": "altText",
              "type": {
                "text": "string"
              },
              "default": "\"Avatar\"",
              "description": "Alt text for img.",
              "attribute": "altText"
            },
            {
              "kind": "method",
              "name": "getSize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getContent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getPlaceholder",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getImage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getInitials",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getBadgeSize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getIndicator",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getBadge",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "imageUrl",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL of the image displayed in the avatar.",
              "fieldName": "imageUrl"
            },
            {
              "name": "initials",
              "type": {
                "text": "string | undefined"
              },
              "description": "The initials displayed in the avatar.\r\n\r\nWill not be displayed an imageUrl is given.",
              "fieldName": "initials"
            },
            {
              "name": "size",
              "type": {
                "text": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
              },
              "default": "\"md\"",
              "description": "The size of the avatar.",
              "fieldName": "size"
            },
            {
              "name": "showStatus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Puts a green border around the avatar.",
              "fieldName": "showStatus"
            },
            {
              "name": "notificationText",
              "type": {
                "text": "string | undefined"
              },
              "description": "The text displayed in the notification badge.",
              "fieldName": "notificationText"
            },
            {
              "name": "statusIcon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "The icon displayed in the status badge.",
              "fieldName": "statusIcon"
            },
            {
              "name": "altText",
              "type": {
                "text": "string"
              },
              "default": "\"Avatar\"",
              "description": "Alt text for img.",
              "fieldName": "altText"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?type=design&node-id=20816-388",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/avatar--docs",
            "description": ""
          },
          "tagName": "zeta-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaAvatar",
          "declaration": {
            "name": "ZetaAvatar",
            "module": "src/components/avatar/avatar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-avatar",
          "declaration": {
            "name": "ZetaAvatar",
            "module": "src/components/avatar/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordion.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The accordion is a control element comprising a vertically stacked list of items, such as labels or thumbnails. Each item can be \"expanded\" or \"collapsed\" to reveal the content associated with that item. There can be zero expanded items, exactly one, or more than one item expanded at a time, depending on the configuration.\r\n\r\nThe contents within the tag will be the child of the open accordion. Typically, this would be list items. Custom styles are applied to ```<li>``` elements to match Zeta styles.",
          "name": "ZetaAccordion",
          "slots": [
            {
              "description": "Typically li",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "accordionTitle",
              "type": {
                "text": "string | undefined"
              },
              "description": "The title of the accordion.",
              "attribute": "accordionTitle"
            },
            {
              "kind": "field",
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Creates a border around the accordion.",
              "attribute": "contained",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the accordion is open.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "toggleOpen",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "titleTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "bodyTemplate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "accordionTitle",
              "type": {
                "text": "string | undefined"
              },
              "description": "The title of the accordion.",
              "fieldName": "accordionTitle"
            },
            {
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Creates a border around the accordion.",
              "fieldName": "contained"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the accordion is open.",
              "fieldName": "open"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            },
            {
              "name": "Interactive",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?type=design&node-id=3427-67874",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/accordion--docs",
            "description": ""
          },
          "tagName": "zeta-accordion",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaAccordion",
          "declaration": {
            "name": "ZetaAccordion",
            "module": "src/components/accordion/accordion.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-accordion",
          "declaration": {
            "name": "ZetaAccordion",
            "module": "src/components/accordion/accordion.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/bottom-sheets/bottom-sheets.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./sheet-handle/sheet-handle.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./sheet-header/sheet-header.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumbs/breadcrumb.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./breadcrumb-truncated/breadcrumb-truncated.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./more-menu/more-menu.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ButtonBase",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name for the button, used if the button is in a form.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value of the name property When submitted as part of a form",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "blur"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "Size",
                "module": "src/mixins/size.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "flavor",
              "type": {
                "text": "\"primary\" | \"secondary\" | \"positive\" | \"negative\" | \"outline\" | \"outline-subtle\" | \"text\""
              },
              "default": "\"primary\"",
              "description": "Flavor of component.\r\n\r\nValues:\r\n* primary - blue background.\r\n* secondary - yellow background.\r\n* positive - green background.\r\n* negative - red background.\r\n* outline - primary outline only.\r\n* outline-subtle - grey outline only.\r\n* text - primary text only.",
              "attribute": "flavor",
              "reflects": true,
              "inheritedFrom": {
                "name": "Flavored",
                "module": "src/mixins/flavor.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name for the button, used if the button is in a form.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value of the name property When submitted as part of a form",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "Size",
                "module": "src/mixins/size.ts"
              }
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "flavor",
              "type": {
                "text": "\"primary\" | \"secondary\" | \"positive\" | \"negative\" | \"outline\" | \"outline-subtle\" | \"text\""
              },
              "default": "\"primary\"",
              "description": "Flavor of component.\r\n\r\nValues:\r\n* primary - blue background.\r\n* secondary - yellow background.\r\n* positive - green background.\r\n* negative - red background.\r\n* outline - primary outline only.\r\n* outline-subtle - grey outline only.\r\n* text - primary text only.",
              "fieldName": "flavor",
              "inheritedFrom": {
                "name": "Flavored",
                "module": "src/mixins/flavor.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Size",
              "module": "/src/mixins/mixins.js"
            },
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            },
            {
              "name": "Flavored",
              "module": "/src/mixins/mixins.js"
            },
            {
              "name": "Interactive",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ButtonBase",
          "declaration": {
            "name": "ButtonBase",
            "module": "src/components/button/button-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Buttons facilitate user interaction.",
          "name": "ZetaButton",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "flavor",
              "type": {
                "text": "\"primary\" | \"secondary\" | \"positive\" | \"negative\" | \"outline\" | \"outline-subtle\" | \"text\""
              },
              "default": "\"primary\"",
              "description": "Flavor of component.\r\n\r\nValues:\r\n* primary - blue background.\r\n* secondary - yellow background.\r\n* positive - green background.\r\n* negative - red background.\r\n* outline - primary outline only.\r\n* outline-subtle - grey outline only.\r\n* text - primary text only.",
              "attribute": "flavor",
              "reflects": true,
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name for the button, used if the button is in a form.",
              "attribute": "name",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value of the name property When submitted as part of a form",
              "attribute": "value",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "ButtonBase",
            "module": "/src/components/button/button-base.js"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=23126-110945",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/buttons--docs",
            "description": ""
          },
          "tagName": "zeta-button",
          "customElement": true,
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "flavor",
              "type": {
                "text": "\"primary\" | \"secondary\" | \"positive\" | \"negative\" | \"outline\" | \"outline-subtle\" | \"text\""
              },
              "default": "\"primary\"",
              "description": "Flavor of component.\r\n\r\nValues:\r\n* primary - blue background.\r\n* secondary - yellow background.\r\n* positive - green background.\r\n* negative - red background.\r\n* outline - primary outline only.\r\n* outline-subtle - grey outline only.\r\n* text - primary text only.",
              "fieldName": "flavor",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name for the button, used if the button is in a form.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value of the name property When submitted as part of a form",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./icon-button/icon-button.js\""
          }
        },
        {
          "kind": "js",
          "name": "ZetaButton",
          "declaration": {
            "name": "ZetaButton",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-button",
          "declaration": {
            "name": "ZetaButton",
            "module": "src/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button-group/button-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Takes in Zeta Button Group Items as children and groups them by applying styling to them.\r\n\r\nDoes not render any other types of children.",
          "name": "ZetaButtonGroup",
          "slots": [
            {
              "description": "Children must be of type `zeta-group-button` otherwise they will not be displayed.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of button.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of button.",
              "fieldName": "size"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-button-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./button-group-item/button-group-item.js\""
          }
        },
        {
          "kind": "js",
          "name": "ZetaButtonGroup",
          "declaration": {
            "name": "ZetaButtonGroup",
            "module": "src/components/button-group/button-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-button-group",
          "declaration": {
            "name": "ZetaButtonGroup",
            "module": "src/components/button-group/button-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Cards are used to display content.",
          "name": "ZetaCard",
          "slots": [
            {
              "description": "The content of the card.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-card",
          "customElement": true,
          "attributes": [
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./card-body/card-body.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./card-footer/card-footer.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./card-header/card-header.js\""
          }
        },
        {
          "kind": "js",
          "name": "ZetaCard",
          "declaration": {
            "name": "ZetaCard",
            "module": "src/components/card/card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-card",
          "declaration": {
            "name": "ZetaCard",
            "module": "src/components/card/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Checkboxes allow users to select one or more items from a set. Checkboxes can turn an option on or off.",
          "name": "ZetaCheckbox",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "true | false | \"intermediate\""
              },
              "default": "false",
              "description": "Controls the state of the checkbox.\r\n\r\nCan be either true, false or intermediate.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the checkbox when used in a form.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label displayed next to the check.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "string"
              },
              "default": "\"checkbox\"",
              "description": "The ID given to the checkbox input.",
              "attribute": "id"
            },
            {
              "kind": "method",
              "name": "toggleCheck",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getLabel",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "true | false | \"intermediate\""
              },
              "default": "false",
              "description": "Controls the state of the checkbox.\r\n\r\nCan be either true, false or intermediate.",
              "fieldName": "checked"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the checkbox when used in a form.",
              "fieldName": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label displayed next to the check.",
              "fieldName": "label"
            },
            {
              "name": "id",
              "type": {
                "text": "string"
              },
              "default": "\"checkbox\"",
              "description": "The ID given to the checkbox input.",
              "fieldName": "id"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21510-54003",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/checkbox--docs",
            "description": ""
          },
          "tagName": "zeta-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaCheckbox",
          "declaration": {
            "name": "ZetaCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-checkbox",
          "declaration": {
            "name": "ZetaCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chips/chips.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./assist-chip/assist-chip.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./filter-chip/filter-chip.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./input-chip/input-chip.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./status-chip/status-chip.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dialog/dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "\r\nUse `zeta-button` for the action button slots; button props/variants are handled here.",
          "name": "ZetaDialog",
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\r\n    ...LitElement.shadowRootOptions,\r\n    delegatesFocus: true\r\n  }"
            },
            {
              "kind": "field",
              "name": "handleSubmit",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Title of the dialog.",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Icon displayed in the dialog header.",
              "attribute": "has-icon"
            },
            {
              "kind": "field",
              "name": "centered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Centered header.",
              "attribute": "centered"
            },
            {
              "kind": "field",
              "name": "initialOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the modal is initially open.",
              "attribute": "initialOpen"
            },
            {
              "kind": "field",
              "name": "confirmBtn",
              "type": {
                "text": "NodeList"
              },
              "description": "Action button 1 (Confirm)."
            },
            {
              "kind": "field",
              "name": "cancelBtn",
              "type": {
                "text": "NodeList"
              },
              "description": "Action button 2 (Cancel)."
            },
            {
              "kind": "field",
              "name": "otherBtn",
              "type": {
                "text": "NodeList"
              },
              "description": "Action button 3 (Learn more/Other)."
            },
            {
              "kind": "method",
              "name": "renderIcon",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleActionButtonChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "kind": "field",
              "name": "returnValue",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Return value of the dialog.",
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "description": "Whether component is open or closed.",
              "readonly": true,
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "parameters": [
                {
                  "name": "returnValue",
                  "default": "this.returnValue"
                }
              ],
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "kind": "method",
              "name": "onBarrierClicked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            }
          ],
          "events": [
            {
              "name": "open",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Event on open",
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "name": "close",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Event on close",
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Title of the dialog.",
              "fieldName": "title"
            },
            {
              "name": "has-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Icon displayed in the dialog header.",
              "fieldName": "hasIcon"
            },
            {
              "name": "centered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Centered header.",
              "fieldName": "centered"
            },
            {
              "name": "initialOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the modal is initially open.",
              "fieldName": "initialOpen"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "open",
              "description": "Whether component is open or closed.",
              "readonly": true,
              "fieldName": "open",
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Popup",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaDialog",
          "declaration": {
            "name": "ZetaDialog",
            "module": "src/components/dialog/dialog.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-dialog",
          "declaration": {
            "name": "ZetaDialog",
            "module": "src/components/dialog/dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./menu-item/dropdown-menu-item.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/global-header/global-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A header with support for displaying a zeta-navigation-menu",
          "name": "ZetaGlobalHeader",
          "slots": [
            {
              "description": "The main content of the header.",
              "name": ""
            },
            {
              "description": "The leading content on the header.",
              "name": "leading"
            },
            {
              "description": "The navigation menu. The position is based on the 'menu-position' property.",
              "name": "navigation-menu"
            },
            {
              "description": "The trailing content on the header.",
              "name": "trailing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text on the header. Can also be slotted.",
              "attribute": "headline"
            },
            {
              "kind": "field",
              "name": "menuPosition",
              "type": {
                "text": "\"inline\" | \"below\""
              },
              "default": "\"inline\"",
              "description": "The position of the navigation.",
              "attribute": "menu-position"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text on the header. Can also be slotted.",
              "fieldName": "headline"
            },
            {
              "name": "menu-position",
              "type": {
                "text": "\"inline\" | \"below\""
              },
              "default": "\"inline\"",
              "description": "The position of the navigation.",
              "fieldName": "menuPosition"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=23144-118110",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/global-header--docs",
            "description": ""
          },
          "tagName": "zeta-global-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaGlobalHeader",
          "declaration": {
            "name": "ZetaGlobalHeader",
            "module": "src/components/global-header/global-header.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-global-header",
          "declaration": {
            "name": "ZetaGlobalHeader",
            "module": "src/components/global-header/global-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/in-page-banner/in-page-banner.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Zeta in page banner component.",
          "name": "ZetaInPageBanner",
          "members": [
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Title of banner, displayed at top.",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Body text of banner.",
              "attribute": "body"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "\"default\" | \"info\" | \"positive\" | \"warning\" | \"negative\""
              },
              "default": "\"default\"",
              "description": "Status of component. .",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "getIcon",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "leadingAction",
              "type": {
                "text": "Array<Node>"
              }
            },
            {
              "kind": "field",
              "name": "trailingAction",
              "type": {
                "text": "Array<Node>"
              }
            },
            {
              "kind": "field",
              "name": "styleButtons",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Title of banner, displayed at top.",
              "fieldName": "title"
            },
            {
              "name": "body",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Body text of banner.",
              "fieldName": "body"
            },
            {
              "name": "status",
              "type": {
                "text": "\"default\" | \"info\" | \"positive\" | \"warning\" | \"negative\""
              },
              "default": "\"default\"",
              "description": "Status of component. .",
              "fieldName": "status"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21156-27071",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/in-page-banner--docs",
            "description": ""
          },
          "tagName": "zeta-in-page-banner",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaInPageBanner",
          "declaration": {
            "name": "ZetaInPageBanner",
            "module": "src/components/in-page-banner/in-page-banner.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-in-page-banner",
          "declaration": {
            "name": "ZetaInPageBanner",
            "module": "src/components/in-page-banner/in-page-banner.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-upload/file-upload.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A file input that supports drag and drop.",
          "name": "ZetaFileUpload",
          "members": [
            {
              "kind": "field",
              "name": "defaultHeadline",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "errorMsg",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string"
              },
              "description": "The headline text.",
              "attribute": "headline"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string | undefined"
              },
              "description": "The caption text.",
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "accept",
              "type": {
                "text": "string | undefined"
              },
              "description": "A comma separated list of accepted file formats.\r\n\r\nFor more information see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#additional_attributes.",
              "attribute": "accept"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Allows multiple files to be added to the input. Also affects drag and drop.",
              "attribute": "multiple"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name given to the file input.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to trigger the 'active' state of the file input.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Use to show the 'error' state of the file input.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fileInput",
              "type": {
                "text": "HTMLInputElement | undefined"
              }
            },
            {
              "kind": "method",
              "name": "checkMultiple",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "DragEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkTypes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "files",
                  "type": {
                    "text": "FileList"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "typesEqual",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "fileType",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "allowedType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "dropHandler",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dragOverHandler",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dragLeaveHandler",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "mouseLeaveHandler",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "openFileInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getCaption",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string"
              },
              "description": "The headline text.",
              "fieldName": "headline"
            },
            {
              "name": "caption",
              "type": {
                "text": "string | undefined"
              },
              "description": "The caption text.",
              "fieldName": "caption"
            },
            {
              "name": "accept",
              "type": {
                "text": "string | undefined"
              },
              "description": "A comma separated list of accepted file formats.\r\n\r\nFor more information see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#additional_attributes.",
              "fieldName": "accept"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Allows multiple files to be added to the input. Also affects drag and drop.",
              "fieldName": "multiple"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name given to the file input.",
              "fieldName": "name"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to trigger the 'active' state of the file input.",
              "fieldName": "active"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Use to show the 'error' state of the file input.",
              "fieldName": "error"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=898-10794",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/file-upload--docs",
            "description": ""
          },
          "tagName": "zeta-file-upload",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaFileUpload",
          "declaration": {
            "name": "ZetaFileUpload",
            "module": "src/components/file-upload/file-upload.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-file-upload",
          "declaration": {
            "name": "ZetaFileUpload",
            "module": "src/components/file-upload/file-upload.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZetaIcon",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "The name of the icon. Full list of icons can be found at https://zeta-icons.web.app/.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string | number"
              },
              "default": "24",
              "description": "Size of icon as css variable.\r\n\r\nIf a Number is provided, will fallback to px.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string | undefined"
              },
              "description": "Color of icon as css variable.",
              "default": "`black`",
              "attribute": "color"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "The name of the icon. Full list of icons can be found at https://zeta-icons.web.app/.",
              "fieldName": "name"
            },
            {
              "name": "size",
              "type": {
                "text": "string | number"
              },
              "default": "24",
              "description": "Size of icon as css variable.\r\n\r\nIf a Number is provided, will fallback to px.",
              "fieldName": "size"
            },
            {
              "name": "color",
              "type": {
                "text": "string | undefined"
              },
              "description": "Color of icon as css variable.",
              "default": "`black`",
              "fieldName": "color"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaIcon",
          "declaration": {
            "name": "ZetaIcon",
            "module": "src/components/icon/icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-icon",
          "declaration": {
            "name": "ZetaIcon",
            "module": "src/components/icon/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Lists display lists of list items.",
          "name": "ZetaList",
          "slots": [
            {
              "description": "The list items. Should be a collection of 'zeta-list-item's.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "divide",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds dividers in between the list items.",
              "attribute": "divide",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "divide",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds dividers in between the list items.",
              "fieldName": "divide"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-list",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./list-item/list-item.js\""
          }
        },
        {
          "kind": "js",
          "name": "ZetaList",
          "declaration": {
            "name": "ZetaList",
            "module": "src/components/list/list.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-list",
          "declaration": {
            "name": "ZetaList",
            "module": "src/components/list/list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-bar/navigation-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Navigation Bars (Bottom navigation) allow movement between primary destinations in an app.",
          "name": "ZetaNavigationBar",
          "slots": [
            {
              "description": "A collection of 'zeta-navigation-bar-item's to be displayed in the navigation bar.",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21186-40498",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/navigation-bar--docs",
            "description": ""
          },
          "tagName": "zeta-navigation-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./navigation-bar-item/navigation-bar-item.js\""
          }
        },
        {
          "kind": "js",
          "name": "ZetaNavigationBar",
          "declaration": {
            "name": "ZetaNavigationBar",
            "module": "src/components/navigation-bar/navigation-bar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-navigation-bar",
          "declaration": {
            "name": "ZetaNavigationBar",
            "module": "src/components/navigation-bar/navigation-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-drawer/navigation-drawer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Navigation drawers provide access to destinations and app functionality, such as switching accounts.\r\nThey can either be permanently on-screen or controlled by a navigation menu icon",
          "name": "ZetaNavigationDrawer",
          "slots": [
            {
              "description": "The main content of the drawer.",
              "name": ""
            },
            {
              "description": "The drawer header.",
              "name": "header"
            },
            {
              "description": "The drawer footer.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "\"left\" | \"right\""
              },
              "default": "\"left\"",
              "description": "The side of the screen that the drawer is anchored on.",
              "attribute": "anchor",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showAnimation",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Toggles the animation for the navigation drawer.",
              "attribute": "show-animation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "initialOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the modal is initially open.",
              "attribute": "initialOpen"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\r\n    ...LitElement.shadowRootOptions,\r\n    delegatesFocus: true\r\n  }"
            },
            {
              "kind": "field",
              "name": "returnValue",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Return value of the dialog.",
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "description": "Whether component is open or closed.",
              "readonly": true,
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "parameters": [
                {
                  "name": "returnValue",
                  "default": "this.returnValue"
                }
              ],
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "kind": "method",
              "name": "onBarrierClicked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        dialog::backdrop {\r\n          background-color: var(--surface-overlay);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "\"left\" | \"right\""
              },
              "default": "\"left\"",
              "description": "The side of the screen that the drawer is anchored on.",
              "fieldName": "anchor"
            },
            {
              "name": "show-animation",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Toggles the animation for the navigation drawer.",
              "fieldName": "showAnimation"
            },
            {
              "name": "initialOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the modal is initially open.",
              "fieldName": "initialOpen"
            },
            {
              "name": "open",
              "description": "Whether component is open or closed.",
              "readonly": true,
              "fieldName": "open",
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Popup",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-navigation-drawer",
          "customElement": true,
          "events": [
            {
              "name": "open",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            },
            {
              "name": "close",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "Popup",
                "module": "src/mixins/popup.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./navigation-drawer-footer/navigation-drawer-footer.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./navigation-drawer-header/navigation-drawer-header.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./navigation-drawer-item/navigation-drawer-item.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./navigation-drawer-sub-item/navigation-drawer-sub-item.js\""
          }
        },
        {
          "kind": "js",
          "name": "ZetaNavigationDrawer",
          "declaration": {
            "name": "ZetaNavigationDrawer",
            "module": "src/components/navigation-drawer/navigation-drawer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-navigation-drawer",
          "declaration": {
            "name": "ZetaNavigationDrawer",
            "module": "src/components/navigation-drawer/navigation-drawer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pagination/pagination.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZetaPagination",
          "members": [
            {
              "kind": "field",
              "name": "totalPages",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "Total number of pages.",
              "attribute": "total-pages"
            },
            {
              "kind": "field",
              "name": "siblingCount",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Number of pages on both sides of current active page.",
              "attribute": "sibling-count"
            },
            {
              "kind": "field",
              "name": "currentPage",
              "description": "Current active page.",
              "attribute": "current-page"
            },
            {
              "kind": "field",
              "name": "range",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handlePageChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "result",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getIconButton",
              "parameters": [
                {
                  "name": "iconName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pageNumber",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "total-pages",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "Total number of pages.",
              "fieldName": "totalPages"
            },
            {
              "name": "sibling-count",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Number of pages on both sides of current active page.",
              "fieldName": "siblingCount"
            },
            {
              "name": "current-page",
              "description": "Current active page.",
              "fieldName": "currentPage"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-pagination",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaPagination",
          "declaration": {
            "name": "ZetaPagination",
            "module": "src/components/pagination/pagination.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-pagination",
          "declaration": {
            "name": "ZetaPagination",
            "module": "src/components/pagination/pagination.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-header/navigation-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A header used to display a collection of zeta-navigation-items.",
          "name": "ZetaNavigationHeader",
          "slots": [
            {
              "description": "The navigation items displayed in the header. Should be a list of zeta-navigation-item.",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-navigation-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./navigation-item/navigation-item.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./navigation-profile/navigation-profile.js\""
          }
        },
        {
          "kind": "js",
          "name": "ZetaNavigationHeader",
          "declaration": {
            "name": "ZetaNavigationHeader",
            "module": "src/components/navigation-header/navigation-header.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-navigation-header",
          "declaration": {
            "name": "ZetaNavigationHeader",
            "module": "src/components/navigation-header/navigation-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/radio-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Radio buttons allow users to select one item from a set. Radio buttons can turn an option on or off.",
          "name": "ZetaRadioButton",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the state of the radio button.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the radio button when used in a form.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "string"
              },
              "default": "\"radio\"",
              "description": "The ID given to the radio input.",
              "attribute": "id"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label displayed next to the check.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "toggleCheck",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getLabel",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the state of the radio button.",
              "fieldName": "checked"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the radio button when used in a form.",
              "fieldName": "name"
            },
            {
              "name": "id",
              "type": {
                "text": "string"
              },
              "default": "\"radio\"",
              "description": "The ID given to the radio input.",
              "fieldName": "id"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label displayed next to the check.",
              "fieldName": "label"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21510-54345",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/radio-button--docs",
            "description": ""
          },
          "tagName": "zeta-radio-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaRadioButton",
          "declaration": {
            "name": "ZetaRadioButton",
            "module": "src/components/radio-button/radio-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-radio-button",
          "declaration": {
            "name": "ZetaRadioButton",
            "module": "src/components/radio-button/radio-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/search/search.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Supports speech recognition search on Chrome.",
          "name": "ZetaSearch",
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ delegatesFocus: true, mode: \"open\" }"
            },
            {
              "kind": "field",
              "name": "inputEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "blur"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Search value.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "formAction",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Form action.",
              "attribute": "form-action"
            },
            {
              "kind": "field",
              "name": "onSubmit",
              "type": {
                "text": "(query?: string) => void | undefined"
              },
              "description": "Onsubmit callback.",
              "attribute": "on-submit"
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show microphone icon.",
              "attribute": "has-icon"
            },
            {
              "kind": "field",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "getIconSize",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "getIconColor",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "resetInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleSpeechRecognition",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "renderRightIcon",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "renderCancelIcon",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleSubmit",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "Size",
                "module": "src/mixins/size.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Search value.",
              "fieldName": "value"
            },
            {
              "name": "form-action",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Form action.",
              "fieldName": "formAction"
            },
            {
              "name": "on-submit",
              "type": {
                "text": "(query?: string) => void | undefined"
              },
              "description": "Onsubmit callback.",
              "fieldName": "onSubmit"
            },
            {
              "name": "has-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show microphone icon.",
              "fieldName": "hasIcon"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "Size",
                "module": "src/mixins/size.ts"
              }
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Size",
              "module": "/src/index.js"
            },
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21286-35997",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/search--docs",
            "description": ""
          },
          "tagName": "zeta-search",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaSearch",
          "declaration": {
            "name": "ZetaSearch",
            "module": "src/components/search/search.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-search",
          "declaration": {
            "name": "ZetaSearch",
            "module": "src/components/search/search.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-indicators/progress-indicators.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./progress-bar/progress-bar.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./progress-circle/progress-circle.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Sliders allow users to make selections from a range of values.",
          "name": "ZetaSlider",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables the slider.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stepIncrement",
              "type": {
                "text": "number | undefined"
              },
              "description": "If set, will put steps on the slider at the given increments and the slider will snap to the nearest step.",
              "attribute": "step-increment"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"default\" | \"range\""
              },
              "default": "\"default\"",
              "description": "The type of the slider. Can either be 'default' or 'range'.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The value of the slider.\r\n\r\nWill have no effect if type is not 'default'.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "lowerValue",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The initial value of the lower end of the slider.\r\n\r\nWill have no effect if type is not 'ranged'.",
              "attribute": "lower-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "upperValue",
              "type": {
                "text": "number"
              },
              "default": "90",
              "description": "The initial value of the maximum end of the slider.\r\n\r\nWill have no effect if type is not 'ranged'.",
              "attribute": "upper-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The minimum value of the slider.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The maximum value of the slider.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "leftHandle",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "rightHandle",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "track",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "selectedArea",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "method",
              "name": "convertPxToPercent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "convertValueToProgress",
              "privacy": "private",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getHandleProgress",
              "privacy": "private",
              "parameters": [
                {
                  "name": "handle",
                  "type": {
                    "text": "HTMLDivElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getHandlePosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "progress",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "handle",
                  "type": {
                    "text": "HTMLDivElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getHandleValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "handle",
                  "type": {
                    "text": "HTMLDivElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "convertProgressToValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "progress",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "roundToStepValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setStyles",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeStyles",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onHandleMoved",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "moveHandle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "mouseDownHandler",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dragHandler",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "trackClickHandler",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "snapHandle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "updateSelectedArea",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "getSteps",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "events": [
            {
              "description": "with a type of ZetaRangeSliderEvent for default sliders.",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables the slider.",
              "fieldName": "disabled"
            },
            {
              "name": "step-increment",
              "type": {
                "text": "number | undefined"
              },
              "description": "If set, will put steps on the slider at the given increments and the slider will snap to the nearest step.",
              "fieldName": "stepIncrement"
            },
            {
              "name": "type",
              "type": {
                "text": "\"default\" | \"range\""
              },
              "default": "\"default\"",
              "description": "The type of the slider. Can either be 'default' or 'range'.",
              "fieldName": "type"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The value of the slider.\r\n\r\nWill have no effect if type is not 'default'.",
              "fieldName": "value"
            },
            {
              "name": "lower-value",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The initial value of the lower end of the slider.\r\n\r\nWill have no effect if type is not 'ranged'.",
              "fieldName": "lowerValue"
            },
            {
              "name": "upper-value",
              "type": {
                "text": "number"
              },
              "default": "90",
              "description": "The initial value of the maximum end of the slider.\r\n\r\nWill have no effect if type is not 'ranged'.",
              "fieldName": "upperValue"
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The minimum value of the slider.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The maximum value of the slider.",
              "fieldName": "max"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-slider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./slider-input-field/slider-input-field.js\""
          }
        },
        {
          "kind": "js",
          "name": "ZetaSlider",
          "declaration": {
            "name": "ZetaSlider",
            "module": "src/components/slider/slider.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-slider",
          "declaration": {
            "name": "ZetaSlider",
            "module": "src/components/slider/slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper/stepper.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Steppers convey progress through numbered steps.\r\n\r\nFor the steps, pass `li` elements with `data-title` and `data-label` attributes as children",
          "name": "ZetaStepper",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "\"vertical\" | \"horizontal\""
              },
              "default": "\"horizontal\"",
              "description": "Stepper direction.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activeStep",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Current active step.",
              "attribute": "active-step"
            },
            {
              "kind": "field",
              "name": "bar",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Show bar separator.",
              "attribute": "bar"
            },
            {
              "kind": "field",
              "name": "renderSteps",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "\"vertical\" | \"horizontal\""
              },
              "default": "\"horizontal\"",
              "description": "Stepper direction.",
              "fieldName": "variant"
            },
            {
              "name": "active-step",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Current active step.",
              "fieldName": "activeStep"
            },
            {
              "name": "bar",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Show bar separator.",
              "fieldName": "bar"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21529-11408",
              "description": ""
            },
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21529-11531",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/stepper--docs",
            "description": ""
          },
          "tagName": "zeta-stepper",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaStepper",
          "declaration": {
            "name": "ZetaStepper",
            "module": "src/components/stepper/stepper.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-stepper",
          "declaration": {
            "name": "ZetaStepper",
            "module": "src/components/stepper/stepper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/switch/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Switches toggle the state of a single item ON or OFF.\r\nTo use with icon variant, provide both activeIcon and inactiveIcon",
          "name": "ZetaSwitch",
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ delegatesFocus: true, mode: \"open\" }"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "State of the switch.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activeIcon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "Icon name to display when switch is ON.",
              "attribute": "activeIcon"
            },
            {
              "kind": "field",
              "name": "inactiveIcon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "Icon name to display when switch is OFF.",
              "attribute": "inactiveIcon"
            },
            {
              "kind": "field",
              "name": "buttonElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "blur"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "State of the switch.",
              "fieldName": "active"
            },
            {
              "name": "activeIcon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "Icon name to display when switch is ON.",
              "fieldName": "activeIcon"
            },
            {
              "name": "inactiveIcon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "Icon name to display when switch is OFF.",
              "fieldName": "inactiveIcon"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=1153-26923",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/switch--docs",
            "description": ""
          },
          "tagName": "zeta-switch",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaSwitch",
          "declaration": {
            "name": "ZetaSwitch",
            "module": "src/components/switch/switch.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-switch",
          "declaration": {
            "name": "ZetaSwitch",
            "module": "src/components/switch/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tooltips display informative text when users hover over, focus on, or tap an element.",
          "name": "ZetaTooltip",
          "members": [
            {
              "kind": "field",
              "name": "point",
              "type": {
                "text": "\"left\" | \"right\" | \"top\" | \"bottom\""
              },
              "default": "\"bottom\"",
              "description": "Position of the tooltip.",
              "attribute": "point",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text content of the tooltip.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "point",
              "type": {
                "text": "\"left\" | \"right\" | \"top\" | \"bottom\""
              },
              "default": "\"bottom\"",
              "description": "Position of the tooltip.",
              "fieldName": "point"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text content of the tooltip.",
              "fieldName": "label"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21816-222",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/tooltip--docs",
            "description": ""
          },
          "tagName": "zeta-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaTooltip",
          "declaration": {
            "name": "ZetaTooltip",
            "module": "src/components/tooltip/tooltip.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-tooltip",
          "declaration": {
            "name": "ZetaTooltip",
            "module": "src/components/tooltip/tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/text-input/text-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Text input component with icon, affix, label and hint text",
          "name": "ZetaTextInput",
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ delegatesFocus: true, mode: \"open\" }"
            },
            {
              "kind": "field",
              "name": "inputEl",
              "type": {
                "text": "HTMLInputElement | null"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether text field is in error state.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Placeholder text shown when value is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "leadingIcon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "Leading icon name.",
              "attribute": "leadingIcon"
            },
            {
              "kind": "field",
              "name": "trailingIcon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "Trailing icon name.",
              "attribute": "trailingIcon"
            },
            {
              "kind": "field",
              "name": "prefix",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Prefix text.",
              "attribute": "prefix"
            },
            {
              "kind": "field",
              "name": "suffix",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Suffix text.",
              "attribute": "suffix"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Label displayed above text field.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "hintText",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Hint text shown below text field.\r\n\r\nif `error`, then `error-text` is shown instead.",
              "attribute": "hint-text"
            },
            {
              "kind": "field",
              "name": "errorText",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Error hint text\r\n\r\nShown if `error`, replaces `hint-text`.",
              "attribute": "error-text"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether input is required.",
              "attribute": "required"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Value",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"text\" | \"textarea\" | \"password\" | \"time\" | \"date\""
              },
              "default": "\"text\"",
              "description": "Type of field",
              "attribute": "type"
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "blur"
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderHintText",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderErrorText",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderLeftIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderRightIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getIconSize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getHintColor",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getErrorHintColor",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getPlaceholder",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderField",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "toggled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "Size",
                "module": "src/mixins/size.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether text field is in error state.",
              "fieldName": "error"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Placeholder text shown when value is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "leadingIcon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "Leading icon name.",
              "fieldName": "leadingIcon"
            },
            {
              "name": "trailingIcon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "Trailing icon name.",
              "fieldName": "trailingIcon"
            },
            {
              "name": "prefix",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Prefix text.",
              "fieldName": "prefix"
            },
            {
              "name": "suffix",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Suffix text.",
              "fieldName": "suffix"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Label displayed above text field.",
              "fieldName": "label"
            },
            {
              "name": "hint-text",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Hint text shown below text field.\r\n\r\nif `error`, then `error-text` is shown instead.",
              "fieldName": "hintText"
            },
            {
              "name": "error-text",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Error hint text\r\n\r\nShown if `error`, replaces `hint-text`.",
              "fieldName": "errorText"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether input is required.",
              "fieldName": "required"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Value",
              "fieldName": "value"
            },
            {
              "name": "type",
              "type": {
                "text": "\"text\" | \"textarea\" | \"password\" | \"time\" | \"date\""
              },
              "default": "\"text\"",
              "description": "Type of field",
              "fieldName": "type"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "Size",
                "module": "src/mixins/size.ts"
              }
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Size",
              "module": "/src/mixins/mixins.js"
            },
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            },
            {
              "name": "Interactive",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=23116-92946",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/text-input--docs",
            "description": ""
          },
          "tagName": "zeta-text-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaTextInput",
          "declaration": {
            "name": "ZetaTextInput",
            "module": "src/components/text-input/text-input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-text-input",
          "declaration": {
            "name": "ZetaTextInput",
            "module": "src/components/text-input/text-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper-input/stepper-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "ZetaStepperInput web component.\r\nA stepper input, also called numeric stepper, is a common UI element that allows users to input a number or value simply by clicking the plus and minus buttons.",
          "name": "ZetaStepperInput",
          "members": [
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "handleOnChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "inputValue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "min",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "max"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "size",
              "type": {
                "text": "\"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "fieldName": "size"
            },
            {
              "name": "value",
              "fieldName": "value"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21529-9963",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/stepper-input--docs",
            "description": ""
          },
          "tagName": "zeta-stepper-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaStepperInput",
          "declaration": {
            "name": "ZetaStepperInput",
            "module": "src/components/stepper-input/stepper-input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-stepper-input",
          "declaration": {
            "name": "ZetaStepperInput",
            "module": "src/components/stepper-input/stepper-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badges/label/label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "To help some information, labels, or errors stand out, we present them with badges. They can look like buttons, but users can’t select them. They just guide users to things they should pay attention to.\r\n\r\nchildren:\r\n   * Text",
          "name": "ZetaLabel",
          "members": [
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "\"info\" | \"positive\" | \"warning\" | \"negative\" | \"neutral\""
              },
              "default": "\"neutral\"",
              "description": "Type of text label.",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text displayed on label.\r\n\r\nCan also be slotted.",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "status",
              "type": {
                "text": "\"info\" | \"positive\" | \"warning\" | \"negative\" | \"neutral\""
              },
              "default": "\"neutral\"",
              "description": "Type of text label.",
              "fieldName": "status"
            },
            {
              "name": "text",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text displayed on label.\r\n\r\nCan also be slotted.",
              "fieldName": "text"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?type=design&node-id=21926-2099",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/badges--docs",
            "description": ""
          },
          "tagName": "zeta-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaLabel",
          "declaration": {
            "name": "ZetaLabel",
            "module": "src/components/badges/label/label.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-label",
          "declaration": {
            "name": "ZetaLabel",
            "module": "src/components/badges/label/label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badges/indicators/indicators.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Indicators are used to show the status of a user or any messages/notifications they might have.",
          "name": "ZetaIndicator",
          "members": [
            {
              "kind": "field",
              "name": "inverse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether indicator is to be on an inverse background.\r\n\r\nAdds an inverse color border to the indicator.",
              "attribute": "inverse",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "ZetaIconName"
              },
              "default": "\"star\"",
              "description": "Icon to be shown on icon type indicator.\r\n\r\nFull list of icons can be found at https://zeta-icons.web.app/.",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"icon\" | \"notification\""
              },
              "default": "\"notification\"",
              "description": "Whether to render as a notification or icon indicator.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "sizes",
              "type": {
                "text": "object"
              },
              "readonly": true,
              "default": "{\r\n    small: 0,\r\n    medium: 8,\r\n    large: 12\r\n  }"
            },
            {
              "kind": "method",
              "name": "getBody",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "Size",
                "module": "src/mixins/size.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "inverse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether indicator is to be on an inverse background.\r\n\r\nAdds an inverse color border to the indicator.",
              "fieldName": "inverse"
            },
            {
              "name": "icon",
              "type": {
                "text": "ZetaIconName"
              },
              "default": "\"star\"",
              "description": "Icon to be shown on icon type indicator.\r\n\r\nFull list of icons can be found at https://zeta-icons.web.app/.",
              "fieldName": "icon"
            },
            {
              "name": "type",
              "type": {
                "text": "\"icon\" | \"notification\""
              },
              "default": "\"notification\"",
              "description": "Whether to render as a notification or icon indicator.",
              "fieldName": "type"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "Size",
                "module": "src/mixins/size.ts"
              }
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Size",
              "module": "/src/mixins/mixins.js"
            },
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?type=design&node-id=22000-10045&mode=design&t=6mhOcUUr3tgxxFdd-0",
              "description": ""
            },
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?type=design&node-id=22000-10072&mode=design&t=6mhOcUUr3tgxxFdd-0",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/badges--docs",
            "description": ""
          },
          "tagName": "zeta-indicator",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Indicator with error red background, and an icon foreground.",
          "name": "ZetaIconIndicator",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"icon\" | \"notification\""
              },
              "default": "\"icon\"",
              "description": "Whether to render as a notification or icon indicator.",
              "attribute": "type",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "inverse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether indicator is to be on an inverse background.\r\n\r\nAdds an inverse color border to the indicator.",
              "attribute": "inverse",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "ZetaIconName"
              },
              "default": "\"star\"",
              "description": "Icon to be shown on icon type indicator.\r\n\r\nFull list of icons can be found at https://zeta-icons.web.app/.",
              "attribute": "icon",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "sizes",
              "type": {
                "text": "object"
              },
              "readonly": true,
              "default": "{\r\n    small: 0,\r\n    medium: 8,\r\n    large: 12\r\n  }",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "method",
              "name": "getBody",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            }
          ],
          "superclass": {
            "name": "ZetaIndicator",
            "module": "src/components/badges/indicators/indicators.ts"
          },
          "tagName": "zeta-icon-indicator",
          "customElement": true,
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "name": "inverse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether indicator is to be on an inverse background.\r\n\r\nAdds an inverse color border to the indicator.",
              "fieldName": "inverse",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "name": "icon",
              "type": {
                "text": "ZetaIconName"
              },
              "default": "\"star\"",
              "description": "Icon to be shown on icon type indicator.\r\n\r\nFull list of icons can be found at https://zeta-icons.web.app/.",
              "fieldName": "icon",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "\"icon\" | \"notification\""
              },
              "default": "\"notification\"",
              "description": "Whether to render as a notification or icon indicator.",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "Indicator with primary blue background and text / number foreground.",
          "name": "ZetaNotificationIndicator",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"icon\" | \"notification\""
              },
              "default": "\"notification\"",
              "description": "Whether to render as a notification or icon indicator.",
              "attribute": "type",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "inverse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether indicator is to be on an inverse background.\r\n\r\nAdds an inverse color border to the indicator.",
              "attribute": "inverse",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "ZetaIconName"
              },
              "default": "\"star\"",
              "description": "Icon to be shown on icon type indicator.\r\n\r\nFull list of icons can be found at https://zeta-icons.web.app/.",
              "attribute": "icon",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "field",
              "name": "sizes",
              "type": {
                "text": "object"
              },
              "readonly": true,
              "default": "{\r\n    small: 0,\r\n    medium: 8,\r\n    large: 12\r\n  }",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "kind": "method",
              "name": "getBody",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            }
          ],
          "superclass": {
            "name": "ZetaIndicator",
            "module": "src/components/badges/indicators/indicators.ts"
          },
          "tagName": "zeta-notification-indicator",
          "customElement": true,
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "name": "inverse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether indicator is to be on an inverse background.\r\n\r\nAdds an inverse color border to the indicator.",
              "fieldName": "inverse",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "name": "icon",
              "type": {
                "text": "ZetaIconName"
              },
              "default": "\"star\"",
              "description": "Icon to be shown on icon type indicator.\r\n\r\nFull list of icons can be found at https://zeta-icons.web.app/.",
              "fieldName": "icon",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "\"icon\" | \"notification\""
              },
              "default": "\"notification\"",
              "description": "Whether to render as a notification or icon indicator.",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "ZetaIndicator",
                "module": "src/components/badges/indicators/indicators.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaIndicator",
          "declaration": {
            "name": "ZetaIndicator",
            "module": "src/components/badges/indicators/indicators.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-indicator",
          "declaration": {
            "name": "ZetaIndicator",
            "module": "src/components/badges/indicators/indicators.ts"
          }
        },
        {
          "kind": "js",
          "name": "ZetaIconIndicator",
          "declaration": {
            "name": "ZetaIconIndicator",
            "module": "src/components/badges/indicators/indicators.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-icon-indicator",
          "declaration": {
            "name": "ZetaIconIndicator",
            "module": "src/components/badges/indicators/indicators.ts"
          }
        },
        {
          "kind": "js",
          "name": "ZetaNotificationIndicator",
          "declaration": {
            "name": "ZetaNotificationIndicator",
            "module": "src/components/badges/indicators/indicators.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-notification-indicator",
          "declaration": {
            "name": "ZetaNotificationIndicator",
            "module": "src/components/badges/indicators/indicators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badges/status-label/status-label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "To help some information, labels, or errors stand out, we present them with badges. They can look like buttons, but users can’t select them. They just guide users to things they should pay attention to.\r\n\r\nSlotted children:\r\n   * Text\r\n   * Icon",
          "name": "ZetaStatusLabel",
          "members": [
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "\"neutral\" | \"info\" | \"positive\" | \"warning\" | \"negative\""
              },
              "default": "\"neutral\"",
              "description": "Type of status label.",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text displayed on label.\r\n\r\nCan also be slotted.",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "Icon leading the component. @see {ZetaIconName}.",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "status",
              "type": {
                "text": "\"neutral\" | \"info\" | \"positive\" | \"warning\" | \"negative\""
              },
              "default": "\"neutral\"",
              "description": "Type of status label.",
              "fieldName": "status"
            },
            {
              "name": "text",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text displayed on label.\r\n\r\nCan also be slotted.",
              "fieldName": "text"
            },
            {
              "name": "icon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "Icon leading the component. @see {ZetaIconName}.",
              "fieldName": "icon"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?type=design&node-id=21836-37274",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/badges--docs",
            "description": ""
          },
          "tagName": "zeta-status-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaStatusLabel",
          "declaration": {
            "name": "ZetaStatusLabel",
            "module": "src/components/badges/status-label/status-label.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-status-label",
          "declaration": {
            "name": "ZetaStatusLabel",
            "module": "src/components/badges/status-label/status-label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badges/tag/tag.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "ZetaTag web component.\r\n\r\nTags are used to draw attention to a specific area or information.\r\nThe arrow shape helps direct the users attention to the desired place.",
          "name": "ZetaTag",
          "members": [
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Text displayed in the tag.",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "point",
              "type": {
                "text": "\"right\" | \"left\""
              },
              "default": "\"right\"",
              "description": "Direction of the tag point.",
              "attribute": "point",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Text displayed in the tag.",
              "fieldName": "text"
            },
            {
              "name": "point",
              "type": {
                "text": "\"right\" | \"left\""
              },
              "default": "\"right\"",
              "description": "Direction of the tag point.",
              "fieldName": "point"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?type=design&node-id=22000-13170",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/badges--docs",
            "description": ""
          },
          "tagName": "zeta-tag",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaTag",
          "declaration": {
            "name": "ZetaTag",
            "module": "src/components/badges/tag/tag.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-tag",
          "declaration": {
            "name": "ZetaTag",
            "module": "src/components/badges/tag/tag.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badges/priority-pill/priority-pill.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This badge is used to indicate the order of importance.\r\n\r\nSlotted children:\r\n   * Number\r\n   * Text",
          "name": "ZetaPriorityPill",
          "members": [
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text of Priority.\r\n\r\nCan also be slotted.",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "number",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Number shown at start of component.\r\n\r\nCan also be slotted.",
              "attribute": "number"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "text",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text of Priority.\r\n\r\nCan also be slotted.",
              "fieldName": "text"
            },
            {
              "name": "number",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "Number shown at start of component.\r\n\r\nCan also be slotted.",
              "fieldName": "number"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?type=design&node-id=22000-15955",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/badges--docs",
            "description": ""
          },
          "tagName": "zeta-priority-pill",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaPriorityPill",
          "declaration": {
            "name": "ZetaPriorityPill",
            "module": "src/components/badges/priority-pill/priority-pill.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-priority-pill",
          "declaration": {
            "name": "ZetaPriorityPill",
            "module": "src/components/badges/priority-pill/priority-pill.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/bottom-sheets/sheet-handle/sheet-handle.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A handle for a zeta-bottom-sheet",
          "name": "ZetaSheetHandle",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21541-2258",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/bottom-sheet--docs",
            "description": ""
          },
          "tagName": "zeta-sheet-handle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaSheetHandle",
          "declaration": {
            "name": "ZetaSheetHandle",
            "module": "src/components/bottom-sheets/sheet-handle/sheet-handle.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-sheet-handle",
          "declaration": {
            "name": "ZetaSheetHandle",
            "module": "src/components/bottom-sheets/sheet-handle/sheet-handle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/bottom-sheets/sheet-header/sheet-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A header for a zeta-bottom-sheet.",
          "name": "ZetaSheetHeader",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "type": {
                "text": "\"start\" | \"center\""
              },
              "default": "\"start\"",
              "description": "Sheet Header alignment.",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"Title\"",
              "description": "Sheet Header text content.",
              "attribute": "text",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "type": {
                "text": "\"start\" | \"center\""
              },
              "default": "\"start\"",
              "description": "Sheet Header alignment.",
              "fieldName": "alignment"
            },
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"Title\"",
              "description": "Sheet Header text content.",
              "fieldName": "text"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21541-2225",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/bottom-sheet--docs",
            "description": ""
          },
          "tagName": "zeta-sheet-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaSheetHeader",
          "declaration": {
            "name": "ZetaSheetHeader",
            "module": "src/components/bottom-sheets/sheet-header/sheet-header.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-sheet-header",
          "declaration": {
            "name": "ZetaSheetHeader",
            "module": "src/components/bottom-sheets/sheet-header/sheet-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumbs/more-menu/more-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZetaMoreMenu",
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "ZetaIconName"
              },
              "default": "\"more_horizontal\"",
              "description": "More menu icon.\r\n\r\nFull list of icons can be found at https://zeta-icons.web.app/.",
              "attribute": "icon"
            },
            {
              "kind": "method",
              "name": "handleOpen"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "ZetaIconName"
              },
              "default": "\"more_horizontal\"",
              "description": "More menu icon.\r\n\r\nFull list of icons can be found at https://zeta-icons.web.app/.",
              "fieldName": "icon"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            },
            {
              "name": "Interactive",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-more-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaMoreMenu",
          "declaration": {
            "name": "ZetaMoreMenu",
            "module": "src/components/breadcrumbs/more-menu/more-menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-more-menu",
          "declaration": {
            "name": "ZetaMoreMenu",
            "module": "src/components/breadcrumbs/more-menu/more-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button-group/button-group-item/button-group-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Button which is used by button groups.",
          "name": "ZetaButtonGroupItem",
          "slots": [
            {
              "description": "Button label content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{\r\n    mode: \"open\",\r\n    delegatesFocus: false\r\n  }"
            },
            {
              "kind": "field",
              "name": "buttonElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Name for the button, used if the button is in a form.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "iconName",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "The name of the icon displayed on the button.",
              "attribute": "iconName"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of button.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "onclick",
              "type": {
                "text": "((this: GlobalEventHandlers, ev: MouseEvent) => unknown) | null"
              },
              "default": "null",
              "attribute": "onclick"
            },
            {
              "kind": "field",
              "name": "addGap",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "blur"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Name for the button, used if the button is in a form.",
              "fieldName": "name"
            },
            {
              "name": "iconName",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "The name of the icon displayed on the button.",
              "fieldName": "iconName"
            },
            {
              "name": "size",
              "type": {
                "text": "\"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of button.",
              "fieldName": "size"
            },
            {
              "name": "onclick",
              "type": {
                "text": "((this: GlobalEventHandlers, ev: MouseEvent) => unknown) | null"
              },
              "default": "null",
              "fieldName": "onclick"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-group-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaButtonGroupItem",
          "declaration": {
            "name": "ZetaButtonGroupItem",
            "module": "src/components/button-group/button-group-item/button-group-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-group-item",
          "declaration": {
            "name": "ZetaButtonGroupItem",
            "module": "src/components/button-group/button-group-item/button-group-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/icon-button/icon-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "ZetaIconButton web component.\r\n\r\nA button containing a Zeta Icon.",
          "name": "ZetaIconButton",
          "members": [
            {
              "kind": "field",
              "name": "iconName",
              "type": {
                "text": "ZetaIconName"
              },
              "default": "\"star\"",
              "description": "The name of the icon displayed on the button.",
              "attribute": "iconName"
            },
            {
              "kind": "method",
              "name": "getIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "getIconColor",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "flavor",
              "type": {
                "text": "\"primary\" | \"secondary\" | \"positive\" | \"negative\" | \"outline\" | \"outline-subtle\" | \"text\""
              },
              "default": "\"primary\"",
              "description": "Flavor of component.\r\n\r\nValues:\r\n* primary - blue background.\r\n* secondary - yellow background.\r\n* positive - green background.\r\n* negative - red background.\r\n* outline - primary outline only.\r\n* outline-subtle - grey outline only.\r\n* text - primary text only.",
              "attribute": "flavor",
              "reflects": true,
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name for the button, used if the button is in a form.",
              "attribute": "name",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value of the name property When submitted as part of a form",
              "attribute": "value",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "iconName",
              "type": {
                "text": "ZetaIconName"
              },
              "default": "\"star\"",
              "description": "The name of the icon displayed on the button.",
              "fieldName": "iconName"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "flavor",
              "type": {
                "text": "\"primary\" | \"secondary\" | \"positive\" | \"negative\" | \"outline\" | \"outline-subtle\" | \"text\""
              },
              "default": "\"primary\"",
              "description": "Flavor of component.\r\n\r\nValues:\r\n* primary - blue background.\r\n* secondary - yellow background.\r\n* positive - green background.\r\n* negative - red background.\r\n* outline - primary outline only.\r\n* outline-subtle - grey outline only.\r\n* text - primary text only.",
              "fieldName": "flavor",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name for the button, used if the button is in a form.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value of the name property When submitted as part of a form",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "ButtonBase",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "ButtonBase",
            "module": "/src/components/button/button-base.js"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=23126-110314",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/buttons--docs",
            "description": ""
          },
          "tagName": "zeta-icon-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaIconButton",
          "declaration": {
            "name": "ZetaIconButton",
            "module": "src/components/button/icon-button/icon-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-icon-button",
          "declaration": {
            "name": "ZetaIconButton",
            "module": "src/components/button/icon-button/icon-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card-body/card-body.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Used to display the text in a card body.",
          "name": "ZetaCardBody",
          "slots": [
            {
              "description": "The content of the card body.",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-card-body",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaCardBody",
          "declaration": {
            "name": "ZetaCardBody",
            "module": "src/components/card/card-body/card-body.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-card-body",
          "declaration": {
            "name": "ZetaCardBody",
            "module": "src/components/card/card-body/card-body.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumbs/breadcrumb-truncated/breadcrumb-truncated.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The breadcrumb is a secondary navigation patten that helps a user understand the hierarchy among levels and navigate back through them.",
          "name": "ZetaBreadcrumbTruncated",
          "members": [
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-breadcrumb-truncated",
          "customElement": true,
          "attributes": [
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaBreadcrumbTruncated",
          "declaration": {
            "name": "ZetaBreadcrumbTruncated",
            "module": "src/components/breadcrumbs/breadcrumb-truncated/breadcrumb-truncated.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-breadcrumb-truncated",
          "declaration": {
            "name": "ZetaBreadcrumbTruncated",
            "module": "src/components/breadcrumbs/breadcrumb-truncated/breadcrumb-truncated.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card-header/card-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Card headers are used at the top of cards.",
          "name": "ZetaCardHeader",
          "slots": [
            {
              "description": "The headline text.",
              "name": ""
            },
            {
              "description": "Content placed before the headline",
              "name": "leading"
            },
            {
              "description": "Content placed after the headline",
              "name": "trailing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text. Can Also be slotted.",
              "attribute": "headline"
            },
            {
              "kind": "field",
              "name": "subHeadline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The sub headline text.",
              "attribute": "sub-headline"
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text. Can Also be slotted.",
              "fieldName": "headline"
            },
            {
              "name": "sub-headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The sub headline text.",
              "fieldName": "subHeadline"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-card-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaCardHeader",
          "declaration": {
            "name": "ZetaCardHeader",
            "module": "src/components/card/card-header/card-header.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-card-header",
          "declaration": {
            "name": "ZetaCardHeader",
            "module": "src/components/card/card-header/card-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card-footer/card-footer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Used at the bottom of a card. Typically contains button elements.",
          "name": "ZetaCardFooter",
          "slots": [
            {
              "description": "The content displayed in the footer. Should be one or two 'zeta-button's.",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-card-footer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaCardFooter",
          "declaration": {
            "name": "ZetaCardFooter",
            "module": "src/components/card/card-footer/card-footer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-card-footer",
          "declaration": {
            "name": "ZetaCardFooter",
            "module": "src/components/card/card-footer/card-footer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chips/assist-chip/assist-chip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseChip",
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderChipLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              }
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "attributes": [
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "Zeta assist Chip web component.",
          "name": "ZetaAssistChip",
          "members": [
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"Label\"",
              "description": "Text displayed in the chip",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"label-only\" | \"label-with-icon\""
              },
              "default": "\"label-only\"",
              "description": "Chips' types.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "renderChipLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              },
              "description": "Override the method in the subclass",
              "inheritedFrom": {
                "name": "BaseChip",
                "module": "src/components/chips/assist-chip/assist-chip.ts"
              }
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseChip",
                "module": "src/components/chips/assist-chip/assist-chip.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "BaseChip",
                "module": "src/components/chips/assist-chip/assist-chip.ts"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseChip",
                "module": "src/components/chips/assist-chip/assist-chip.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"Label\"",
              "description": "Text displayed in the chip",
              "fieldName": "text"
            },
            {
              "name": "type",
              "type": {
                "text": "\"label-only\" | \"label-with-icon\""
              },
              "default": "\"label-only\"",
              "description": "Chips' types.",
              "fieldName": "type"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "BaseChip",
                "module": "src/components/chips/assist-chip/assist-chip.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseChip",
            "module": "src/components/chips/assist-chip/assist-chip.ts"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21265-14215",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/chips--docs",
            "description": ""
          },
          "tagName": "zeta-assist-chip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseChip",
          "declaration": {
            "name": "BaseChip",
            "module": "src/components/chips/assist-chip/assist-chip.ts"
          }
        },
        {
          "kind": "js",
          "name": "ZetaAssistChip",
          "declaration": {
            "name": "ZetaAssistChip",
            "module": "src/components/chips/assist-chip/assist-chip.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-assist-chip",
          "declaration": {
            "name": "ZetaAssistChip",
            "module": "src/components/chips/assist-chip/assist-chip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chips/filter-chip/filter-chip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Zeta Filter Chip web component.",
          "name": "ZetaFilterChip",
          "members": [
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"Label\"",
              "description": "Text displayed in the chip.",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"unselected\" | \"selected\""
              },
              "default": "\"unselected\"",
              "description": "Chips' types.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"Label\"",
              "description": "Text displayed in the chip.",
              "fieldName": "text"
            },
            {
              "name": "type",
              "type": {
                "text": "\"unselected\" | \"selected\""
              },
              "default": "\"unselected\"",
              "description": "Chips' types.",
              "fieldName": "type"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21265-14112",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/chips--docs",
            "description": ""
          },
          "tagName": "zeta-filter-chip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaFilterChip",
          "declaration": {
            "name": "ZetaFilterChip",
            "module": "src/components/chips/filter-chip/filter-chip.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-filter-chip",
          "declaration": {
            "name": "ZetaFilterChip",
            "module": "src/components/chips/filter-chip/filter-chip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chips/status-chip/status-chip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Zeta Status Chip web component.",
          "name": "ZetaStatusChip",
          "members": [
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Text displayed in the chip.",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Text displayed in the chip.",
              "fieldName": "text"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21265-14282",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/chips--docs",
            "description": ""
          },
          "tagName": "zeta-status-chip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaStatusChip",
          "declaration": {
            "name": "ZetaStatusChip",
            "module": "src/components/chips/status-chip/status-chip.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-status-chip",
          "declaration": {
            "name": "ZetaStatusChip",
            "module": "src/components/chips/status-chip/status-chip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/menu-item/dropdown-menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "ZetaDropdownMenuItem web component.",
          "name": "ZetaDropdownMenuItem",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"default\" | \"checkbox\" | \"radio\""
              },
              "default": "\"default\"",
              "description": "Changes the type of the menu item.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "The name of the icon to be shown.\r\n\r\nWill only be displayed if 'type' is set to 'default'.",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the state of the dropdown menu item.",
              "attribute": "checked"
            },
            {
              "kind": "method",
              "name": "toggleCheck",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getLeadingContent",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "\"default\" | \"checkbox\" | \"radio\""
              },
              "default": "\"default\"",
              "description": "Changes the type of the menu item.",
              "fieldName": "type"
            },
            {
              "name": "icon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "description": "The name of the icon to be shown.\r\n\r\nWill only be displayed if 'type' is set to 'default'.",
              "fieldName": "icon"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the state of the dropdown menu item.",
              "fieldName": "checked"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=22391-10146",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/dropdown--docs",
            "description": ""
          },
          "tagName": "zeta-dropdown-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaDropdownMenuItem",
          "declaration": {
            "name": "ZetaDropdownMenuItem",
            "module": "src/components/dropdown/menu-item/dropdown-menu-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-dropdown-menu-item",
          "declaration": {
            "name": "ZetaDropdownMenuItem",
            "module": "src/components/dropdown/menu-item/dropdown-menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chips/input-chip/input-chip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Zeta Input Chip web component.",
          "name": "ZetaInputChip",
          "members": [
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"Label\"",
              "description": "Text displayed in the chip.",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"label-only\" | \"label-with-close-icon\" | \"label-with-avatar-icon\" | \"label-with-both-icons\""
              },
              "default": "\"label-only\"",
              "description": "Chips' types.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "handleClose"
            },
            {
              "kind": "field",
              "name": "handleUser"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "\"Label\"",
              "description": "Text displayed in the chip.",
              "fieldName": "text"
            },
            {
              "name": "type",
              "type": {
                "text": "\"label-only\" | \"label-with-close-icon\" | \"label-with-avatar-icon\" | \"label-with-both-icons\""
              },
              "default": "\"label-only\"",
              "description": "Chips' types.",
              "fieldName": "type"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21265-2159",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/chips--docs",
            "description": ""
          },
          "tagName": "zeta-input-chip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaInputChip",
          "declaration": {
            "name": "ZetaInputChip",
            "module": "src/components/chips/input-chip/input-chip.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-input-chip",
          "declaration": {
            "name": "ZetaInputChip",
            "module": "src/components/chips/input-chip/input-chip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list-item/list-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "List items are used in lists.",
          "name": "ZetaListItem",
          "slots": [
            {
              "description": "Content placed before the headline",
              "name": "leading"
            },
            {
              "description": "Content placed after the headline",
              "name": "trailing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text of the list element.",
              "attribute": "headline"
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text of the list element.",
              "fieldName": "headline"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-list-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaListItem",
          "declaration": {
            "name": "ZetaListItem",
            "module": "src/components/list/list-item/list-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-list-item",
          "declaration": {
            "name": "ZetaListItem",
            "module": "src/components/list/list-item/list-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-bar/navigation-bar-item/navigation-bar-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A nav item to be used in a zeta-navigation-bar",
          "name": "ZetaNavigationBarItem",
          "slots": [
            {
              "description": "Displayed overlaying the icon. Should be a 'zeta-notification-indicator'.",
              "name": "badge"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "getLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getIconColor",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "ZetaIconName | undefined"
              },
              "fieldName": "icon"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "label"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "figma": [
            {
              "name": "https://www.figma.com/file/JesXQFLaPJLc1BdBM4sisI/%F0%9F%A6%93-ZDS---Components?node-id=21186-41419",
              "description": ""
            }
          ],
          "storybook": {
            "name": "https://zeta-ds.web.app/web/storybook/?path=/docs/navigation-bar--docs",
            "description": ""
          },
          "tagName": "zeta-navigation-bar-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaNavigationBarItem",
          "declaration": {
            "name": "ZetaNavigationBarItem",
            "module": "src/components/navigation-bar/navigation-bar-item/navigation-bar-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-navigation-bar-item",
          "declaration": {
            "name": "ZetaNavigationBarItem",
            "module": "src/components/navigation-bar/navigation-bar-item/navigation-bar-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-drawer/navigation-drawer-header/navigation-drawer-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The header used on a navigation drawer.",
          "name": "ZetaNavigationDrawerHeader",
          "slots": [
            {
              "description": "The headline text.",
              "name": ""
            },
            {
              "description": "Content placed before the headline.",
              "name": "leading"
            },
            {
              "description": "Content placed after the headline.",
              "name": "trailing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text. Can also be slotted.",
              "attribute": "headline"
            },
            {
              "kind": "field",
              "name": "subHeadline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The sub headline text.",
              "attribute": "sub-headline"
            },
            {
              "kind": "field",
              "name": "divide",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows a divider below the header.",
              "attribute": "divide",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text. Can also be slotted.",
              "fieldName": "headline"
            },
            {
              "name": "sub-headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The sub headline text.",
              "fieldName": "subHeadline"
            },
            {
              "name": "divide",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows a divider below the header.",
              "fieldName": "divide"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-navigation-drawer-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaNavigationDrawerHeader",
          "declaration": {
            "name": "ZetaNavigationDrawerHeader",
            "module": "src/components/navigation-drawer/navigation-drawer-header/navigation-drawer-header.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-navigation-drawer-header",
          "declaration": {
            "name": "ZetaNavigationDrawerHeader",
            "module": "src/components/navigation-drawer/navigation-drawer-header/navigation-drawer-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badges/workcloud-indicator/workcloud-indicator.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZetaWorkcloudIndicator",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"medium\" | \"small\" | \"xs\""
              },
              "default": "\"medium\"",
              "description": "Size variant",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "priority",
              "type": {
                "text": "\"urgent\" | \"high\" | \"medium\" | \"low\""
              },
              "default": "\"low\"",
              "description": "Priority level",
              "attribute": "priority",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "number",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Number of indications",
              "attribute": "number"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"medium\" | \"small\" | \"xs\""
              },
              "default": "\"medium\"",
              "description": "Size variant",
              "fieldName": "size"
            },
            {
              "name": "priority",
              "type": {
                "text": "\"urgent\" | \"high\" | \"medium\" | \"low\""
              },
              "default": "\"low\"",
              "description": "Priority level",
              "fieldName": "priority"
            },
            {
              "name": "number",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Number of indications",
              "fieldName": "number"
            }
          ],
          "superclass": {
            "name": "ZetaWorkcloudIndicatorBase",
            "module": "src/components/badges/workcloud-indicator/workcloud-indicator.ts"
          },
          "tagName": "zeta-workcloud-indicator",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaWorkcloudIndicator",
          "declaration": {
            "name": "ZetaWorkcloudIndicator",
            "module": "src/components/badges/workcloud-indicator/workcloud-indicator.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-workcloud-indicator",
          "declaration": {
            "name": "ZetaWorkcloudIndicator",
            "module": "src/components/badges/workcloud-indicator/workcloud-indicator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-drawer/navigation-drawer-footer/navigation-drawer-footer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The footer used on a navigation drawer.",
          "name": "ZetaNavigationDrawerFooter",
          "slots": [
            {
              "description": "The headline text.",
              "name": ""
            },
            {
              "description": "Content placed before the headline. Not shown if 'variant' is set to 'logo'.",
              "name": "leading"
            },
            {
              "description": "Content placed after the headline. Not shown if 'variant' is set to 'logo'.",
              "name": "trailing"
            },
            {
              "description": "The element that replaces the default Zebra logo. Not shown if 'variant' is set to 'profile'.",
              "name": "logo"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text. Can also be slotted.",
              "attribute": "headline"
            },
            {
              "kind": "field",
              "name": "subHeadline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The sub headline text.",
              "attribute": "sub-headline"
            },
            {
              "kind": "field",
              "name": "divide",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows a divider above the footer.",
              "attribute": "divide",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "\"profile\" | \"logo\""
              },
              "default": "\"profile\"",
              "description": "The variant of the footer.\r\n\r\nIf set to 'logo' the zebra logo or the contents of the 'logo' slot will be shown and the headline text will be displayed beneath the logo.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideDefaultLogo",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "hide-default-logo",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customLogo",
              "type": {
                "text": "NodeList"
              }
            },
            {
              "kind": "method",
              "name": "getProfileFooter",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getLogoFooter",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text. Can also be slotted.",
              "fieldName": "headline"
            },
            {
              "name": "sub-headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The sub headline text.",
              "fieldName": "subHeadline"
            },
            {
              "name": "divide",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows a divider above the footer.",
              "fieldName": "divide"
            },
            {
              "name": "variant",
              "type": {
                "text": "\"profile\" | \"logo\""
              },
              "default": "\"profile\"",
              "description": "The variant of the footer.\r\n\r\nIf set to 'logo' the zebra logo or the contents of the 'logo' slot will be shown and the headline text will be displayed beneath the logo.",
              "fieldName": "variant"
            },
            {
              "name": "hide-default-logo",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "hideDefaultLogo"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-navigation-drawer-footer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaNavigationDrawerFooter",
          "declaration": {
            "name": "ZetaNavigationDrawerFooter",
            "module": "src/components/navigation-drawer/navigation-drawer-footer/navigation-drawer-footer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-navigation-drawer-footer",
          "declaration": {
            "name": "ZetaNavigationDrawerFooter",
            "module": "src/components/navigation-drawer/navigation-drawer-footer/navigation-drawer-footer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-drawer/navigation-drawer-item/navigation-drawer-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A navigation item to be used in a zeta-navigation-drawer",
          "name": "ZetaNavigationDrawerItem",
          "slots": [
            {
              "description": "The headline text.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text. Can also be slotted.",
              "attribute": "headline"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the item to active.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text. Can also be slotted.",
              "fieldName": "headline"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the item to active.",
              "fieldName": "active"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-navigation-drawer-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaNavigationDrawerItem",
          "declaration": {
            "name": "ZetaNavigationDrawerItem",
            "module": "src/components/navigation-drawer/navigation-drawer-item/navigation-drawer-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-navigation-drawer-item",
          "declaration": {
            "name": "ZetaNavigationDrawerItem",
            "module": "src/components/navigation-drawer/navigation-drawer-item/navigation-drawer-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-drawer/navigation-drawer-sub-item/navigation-drawer-sub-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A navigation sub item to be used in a zeta-navigation-drawer",
          "name": "ZetaNavigationDrawerSubItem",
          "slots": [
            {
              "description": "The headline text.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text. Can also be slotted.",
              "attribute": "headline"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the item to active.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "description": "The headline text. Can also be slotted.",
              "fieldName": "headline"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the item to active.",
              "fieldName": "active"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-navigation-drawer-sub-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaNavigationDrawerSubItem",
          "declaration": {
            "name": "ZetaNavigationDrawerSubItem",
            "module": "src/components/navigation-drawer/navigation-drawer-sub-item/navigation-drawer-sub-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-navigation-drawer-sub-item",
          "declaration": {
            "name": "ZetaNavigationDrawerSubItem",
            "module": "src/components/navigation-drawer/navigation-drawer-sub-item/navigation-drawer-sub-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-indicators/progress-bar/progress-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Progress indicators express an unspecified wait time or display the length of a process.",
          "name": "ZetaProgressBar",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"thin\" | \"medium\""
              },
              "default": "\"medium\"",
              "description": "The size of the progress indicator. Can either be 'medium' or 'thin'.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Displays the indeterminate progress indicator. If set to true, any argument for 'value' will be ignored.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The % complete of the process indicator.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label for the progress indicator.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "buffering",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Displays the buffering dots at the end of the progress indicator.\r\n\r\nSetting this will pause the animation if 'indeterminate' is set to true.",
              "attribute": "buffering",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "getBufferingDots",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"thin\" | \"medium\""
              },
              "default": "\"medium\"",
              "description": "The size of the progress indicator. Can either be 'medium' or 'thin'.",
              "fieldName": "size"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Displays the indeterminate progress indicator. If set to true, any argument for 'value' will be ignored.",
              "fieldName": "indeterminate"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The % complete of the process indicator.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label for the progress indicator.",
              "fieldName": "label"
            },
            {
              "name": "buffering",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Displays the buffering dots at the end of the progress indicator.\r\n\r\nSetting this will pause the animation if 'indeterminate' is set to true.",
              "fieldName": "buffering"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-progress-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaProgressBar",
          "declaration": {
            "name": "ZetaProgressBar",
            "module": "src/components/progress-indicators/progress-bar/progress-bar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-progress-bar",
          "declaration": {
            "name": "ZetaProgressBar",
            "module": "src/components/progress-indicators/progress-bar/progress-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-indicators/progress-circle/progress-circle.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Progress indicators express an unspecified wait time or display the length of a process.",
          "name": "ZetaProgressCircle",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "24 | 36 | 40 | 48 | 64"
              },
              "default": "64",
              "description": "Size.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "progress",
              "description": "Progress (0-100).",
              "attribute": "progress"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Animated state.",
              "attribute": "loading"
            },
            {
              "kind": "field",
              "name": "uploading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Uploading state.",
              "attribute": "uploading"
            },
            {
              "kind": "field",
              "name": "progressValue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "strokeWidth",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "readonly": true,
              "default": "3"
            },
            {
              "kind": "field",
              "name": "getStrokeDasharray",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "getStrokeDashoffset",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "renderUploading",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "24 | 36 | 40 | 48 | 64"
              },
              "default": "64",
              "description": "Size.",
              "fieldName": "size"
            },
            {
              "name": "progress",
              "description": "Progress (0-100).",
              "fieldName": "progress"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Animated state.",
              "fieldName": "loading"
            },
            {
              "name": "uploading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Uploading state.",
              "fieldName": "uploading"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-progress-circle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaProgressCircle",
          "declaration": {
            "name": "ZetaProgressCircle",
            "module": "src/components/progress-indicators/progress-circle/progress-circle.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-progress-circle",
          "declaration": {
            "name": "ZetaProgressCircle",
            "module": "src/components/progress-indicators/progress-circle/progress-circle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-header/navigation-profile/navigation-profile.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZetaNavigationProfile",
          "slots": [
            {
              "description": "The headline text.",
              "name": ""
            },
            {
              "description": "The leading content. Typically a zeta-avatar.",
              "name": "leading"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-navigation-profile",
          "customElement": true,
          "attributes": [
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaNavigationProfile",
          "declaration": {
            "name": "ZetaNavigationProfile",
            "module": "src/components/navigation-header/navigation-profile/navigation-profile.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-navigation-profile",
          "declaration": {
            "name": "ZetaNavigationProfile",
            "module": "src/components/navigation-header/navigation-profile/navigation-profile.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-header/navigation-item/navigation-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A navigation item to be used in a zeta-navigation-header",
          "name": "ZetaNavigationItem",
          "slots": [
            {
              "description": "The content of the menu item.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Interactive",
                "module": "src/mixins/interactive.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/index.js"
            },
            {
              "name": "Interactive",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-navigation-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaNavigationItem",
          "declaration": {
            "name": "ZetaNavigationItem",
            "module": "src/components/navigation-header/navigation-item/navigation-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-navigation-item",
          "declaration": {
            "name": "ZetaNavigationItem",
            "module": "src/components/navigation-header/navigation-item/navigation-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-input-field/slider-input-field.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An input field using a Zeta Slider",
          "name": "ZetaSliderInputField",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label displayed above the input.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name given to the input field.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | undefined"
              },
              "description": "The value of the input field.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Error state.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The minimum value of the slider input field.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The maximum value of the slider input field.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "stepIncrement",
              "type": {
                "text": "number | undefined"
              },
              "description": "If set, will put steps on the slider at the given increments and the slider will snap to the nearest step.",
              "attribute": "step-increment"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables the input field.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "method",
              "name": "getLabel",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "sliderChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onValueUpdated",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true,
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "CustomEvent"
              },
              "description": "with a type of ZetaSliderEvent"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label displayed above the input.",
              "fieldName": "label"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name given to the input field.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "number | undefined"
              },
              "description": "The value of the input field.",
              "fieldName": "value"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Error state.",
              "fieldName": "error"
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The minimum value of the slider input field.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The maximum value of the slider input field.",
              "fieldName": "max"
            },
            {
              "name": "step-increment",
              "type": {
                "text": "number | undefined"
              },
              "description": "If set, will put steps on the slider at the given increments and the slider will snap to the nearest step.",
              "fieldName": "stepIncrement"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables the input field.",
              "fieldName": "disabled"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded",
              "inheritedFrom": {
                "name": "Contourable",
                "module": "src/mixins/contour.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "Contourable",
              "module": "/src/mixins/mixins.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zeta-slider-input-field",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZetaSliderInputField",
          "declaration": {
            "name": "ZetaSliderInputField",
            "module": "src/components/slider/slider-input-field/slider-input-field.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zeta-slider-input-field",
          "declaration": {
            "name": "ZetaSliderInputField",
            "module": "src/components/slider/slider-input-field/slider-input-field.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/contour.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixin to add Contourable to component.\r\n\r\nAdds rounded attribute, and associated styles.",
          "name": "Contourable",
          "members": [
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "attribute": "rounded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > *,\r\n        :host .contourable-target {\r\n          border-radius: var(--radius-none);\r\n        }\r\n        :host([rounded]) > *,\r\n        :host([rounded]) .contourable-target {\r\n          border-radius: var(--radius-minimal);\r\n        }\r\n      `\r\n    ]"
            }
          ],
          "attributes": [
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component is rounded or sharp.\r\n\r\nWhen true, rounded will set the border radius of the first child, and any children with class 'contourable-target' to `--radius-minimal`.\r\n\r\nOtherwise, this value will be `--radius-none`.",
              "fieldName": "rounded"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              },
              "description": "LitElement to add mixin to"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Contourable",
          "declaration": {
            "name": "Contourable",
            "module": "src/mixins/contour.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/flavor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FlavoredInterface",
          "members": [
            {
              "kind": "field",
              "name": "flavor",
              "type": {
                "text": "\"primary\" | \"secondary\" | \"positive\" | \"negative\" | \"outline\" | \"outline-subtle\" | \"text\""
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "Mixin to add flavor to component.\r\n\r\nAdds flavor attribute and associated styles.",
          "name": "Flavored",
          "members": [
            {
              "kind": "field",
              "name": "flavor",
              "type": {
                "text": "\"primary\" | \"secondary\" | \"positive\" | \"negative\" | \"outline\" | \"outline-subtle\" | \"text\""
              },
              "default": "\"primary\"",
              "description": "Flavor of component.\r\n\r\nValues:\r\n* primary - blue background.\r\n* secondary - yellow background.\r\n* positive - green background.\r\n* negative - red background.\r\n* outline - primary outline only.\r\n* outline-subtle - grey outline only.\r\n* text - primary text only.",
              "attribute": "flavor",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]"
            }
          ],
          "attributes": [
            {
              "name": "flavor",
              "type": {
                "text": "\"primary\" | \"secondary\" | \"positive\" | \"negative\" | \"outline\" | \"outline-subtle\" | \"text\""
              },
              "default": "\"primary\"",
              "description": "Flavor of component.\r\n\r\nValues:\r\n* primary - blue background.\r\n* secondary - yellow background.\r\n* positive - green background.\r\n* negative - red background.\r\n* outline - primary outline only.\r\n* outline-subtle - grey outline only.\r\n* text - primary text only.",
              "fieldName": "flavor"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              },
              "description": "LitElement to add mixin to"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FlavoredInterface",
          "declaration": {
            "name": "FlavoredInterface",
            "module": "src/mixins/flavor.ts"
          }
        },
        {
          "kind": "js",
          "name": "Flavored",
          "declaration": {
            "name": "Flavored",
            "module": "src/mixins/flavor.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/interactive.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixin to add interactive states to component.\r\n\r\nAdds disabled attribute and associated styles.",
          "name": "Interactive",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean for if component is disabled.\r\n\r\nThis will apply disabled styles.",
              "fieldName": "disabled"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              },
              "description": "LitElement to add mixin to"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/mixins/interactive.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/mixins.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./_utils.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./flavor.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./interactive.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./popup.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./size.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./contour.js\""
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/popup.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixin to add make component pop up as a dialog.",
          "name": "Popup",
          "members": [
            {
              "kind": "field",
              "name": "returnValue",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Return value of the dialog."
            },
            {
              "kind": "field",
              "name": "open",
              "description": "Whether component is open or closed.",
              "readonly": true,
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show"
            },
            {
              "kind": "method",
              "name": "hide",
              "parameters": [
                {
                  "name": "returnValue",
                  "default": "this.returnValue"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onBarrierClicked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        dialog::backdrop {\r\n          background-color: var(--surface-overlay);\r\n        }\r\n      `\r\n    ]"
            }
          ],
          "events": [
            {
              "name": "open",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "close",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "description": "Whether component is open or closed.",
              "readonly": true,
              "fieldName": "open"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              },
              "description": "LitElement to add mixin to"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Popup",
          "declaration": {
            "name": "Popup",
            "module": "src/mixins/popup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/size.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixin to add sizes component.\r\n\r\nOnly adds size property, does not apply styles.",
          "name": "Size",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[(superClass as unknown as typeof LitElement).styles ?? [], styles]"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "Size of component",
              "fieldName": "size"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              },
              "description": "LitElement to add mixin to"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Size",
          "declaration": {
            "name": "Size",
            "module": "src/mixins/size.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/_utils.ts",
      "declarations": [],
      "exports": []
    }
  ]
}
