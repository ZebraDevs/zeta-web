{"version":3,"file":"contour.js","sourceRoot":"","sources":["../../src/mixins/contour.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AACtC,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAQ7C,MAAM,CAAC,MAAM,WAAW,GAAG,CAAoC,UAAa,EAAE,EAAE;IAC9E,MAAM,gBAAiB,SAAQ,UAAU;QAAzC;;YAC8C,YAAO,GAAG,IAAI,CAAC;QAY7D,CAAC;;IAXQ,uBAAM,GAAG;QACb,UAA2C,CAAC,MAAM,IAAI,EAAE;QACzD,GAAG,CAAA;;;;;;;OAOF;KACF,AAVY,CAUX;IAX0C;QAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;qDAAgB;IAa7D,OAAO,gBAAsE,CAAC;AAChF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC","sourcesContent":["import { LitElement, css } from \"lit\";\r\nimport { property } from \"lit/decorators.js\";\r\nimport { Constructor } from \"./_utils.js\";\r\n\r\n// Define the interface for the mixin\r\nexport declare class ContourableInterface {\r\n  rounded: boolean;\r\n}\r\n\r\nexport const Contourable = <T extends Constructor<LitElement>>(superClass: T) => {\r\n  class ContourableClass extends superClass {\r\n    @property({ type: Boolean, reflect: true }) rounded = true;\r\n    static styles = [\r\n      (superClass as unknown as typeof LitElement).styles ?? [],\r\n      css`\r\n        :host > * {\r\n          border-radius: 0;\r\n        }\r\n        :host([rounded]) > * {\r\n          border-radius: 4px;\r\n        }\r\n      `\r\n    ];\r\n  }\r\n  return ContourableClass as Constructor<ContourableInterface & LitElement> & T;\r\n};\r\n\r\nexport const ContourableElement = Contourable(LitElement);\r\n"]}