{"version":3,"file":"status-label.js","sourceRoot":"","sources":["../../../src/components/badges/status-label.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AACzC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,qBAAqB,EAAE,MAAM,mBAAmB,CAAC;AAEnF,OAAO,EAAE,6BAA6B,EAAE,MAAM,0BAA0B,CAAC;AACzE,OAAQ,MAAM,MAAO,qBAAqB,CAAC;AAE3C;;;;;;;;aAQa;AAEN,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,6BAA6B;IAA3D;;QACL;;gDAEwC;QACG,WAAM,GAAgB,SAAS,CAAC;IA2B7E,CAAC;IAfoB,MAAM;QACvB,MAAM,MAAM,GAAG,GAAG,CAAA;;;WAGX,CAAC;QACR,OAAO,IAAI,CAAA;;;YAGH,IAAI,CAAC,OAAO,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;0CAC1C,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE;;4BAExC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA,wCAAwC;;KAE3F,CAAC;IACJ,CAAC;;AAhBM,sBAAM,GAAG,CAAC,SAAM,MAAM,IAAI,EAAE,EAAE,MAAM,CAAC,AAA/B,CAAgC;AAVF;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;+CAAiC;AAK/C;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;6CAA0B;AAGZ;IAAxC,qBAAqB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gDAAyC;AAZtE,eAAe;IAD3B,aAAa,CAAC,mBAAmB,CAAC;GACtB,eAAe,CA+B3B","sourcesContent":["import { html, nothing, svg } from \"lit\";\r\nimport { customElement, property, queryAssignedElements } from \"lit/decorators.js\";\r\nimport { BadgeStatus } from \"../../types.js\";\r\nimport { ContourableCondensableElement } from \"../../mixins/condense.js\";\r\nimport  styles  from \"./status-label.scss\";\r\n\r\n/** ZetaStatusLabel web component.\r\n *\r\n * To help some information, labels, or errors stand out, we present them with badges. They can look like buttons, but users canâ€™t select them. They just guide users to things they should pay attention to.\r\n *\r\n * Slotted children:\r\n *    * Text\r\n *    * Icon\r\n *\r\n * @public */\r\n@customElement(\"zeta-status-label\")\r\nexport class ZetaStatusLabel extends ContourableCondensableElement {\r\n  /** Type of status label.\r\n   *\r\n   * @defaultValue `BannerType.default` */\r\n  @property({ type: String, reflect: true }) status: BadgeStatus = \"neutral\";\r\n\r\n  /** Text displayed on label.\r\n   *\r\n   * Can also be slotted. */\r\n  @property({ type: String }) text: string | undefined;\r\n\r\n  /** Link to slotted icon. */\r\n  @queryAssignedElements({ slot: \"icon\" }) hasIcon: Array<HTMLElement> | undefined;\r\n\r\n  static styles = [super.styles ?? [], styles];\r\n\r\n  protected override render() {\r\n    const noIcon = svg`\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"8\" height=\"20\" viewBox=\"0 0 8 8\" >\r\n    <circle cx=\"4\" cy=\"4\" r=\"4\" />\r\n    </svg>`;\r\n    return html`\r\n      <div class=\"container\">\r\n        <div class=\"icon-container\">\r\n          ${this.hasIcon == undefined || this.hasIcon.length == 0 ? noIcon : nothing}\r\n          <slot name=\"icon\" @slotchange=${() => this.requestUpdate()}></slot>\r\n        </div>\r\n        <div class=\"text\">${this.text ? this.text : html`<slot class=\"text\" name=\"text\"></slot>`}</div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    \"zeta-status-label\": ZetaStatusLabel;\r\n  }\r\n}\r\n\r\n"]}